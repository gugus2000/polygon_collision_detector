polygon_1, polygon_2
i = 0
if (polygon_1[0] is inside polygon_2)
{
	return true
}
while (i is less than the size of polygon_2)
{
	vectors_polygon_1 = vectors of the inverse of polygon_1
	start_point = polygon_2[i]
	if (i is equal to the size of polygon_2 minus 1)
	{
		end_point = polygon_2[0]
	}
	else
	{
		end_point = polygon_2[i+1]
	}
	vector_side = vector from start_point to end_point
	inverse_vector_side = vector from end point to start point
	theta_minimum = atan2(vector_side[1], vector_side[0])
	theta_maximum = theta_minimum + pi
	if (theta_minimum is less than 0)
	{
		theta_minimum = theta_minimum + 2 * pi
	}
	switch = true
	reverse_switch = true
	j = 0
	link_vect = []
	reverse_link_vect = []
	do
	{
		theta_j = atan2(vectors_polygon_1[j][1], vectors_polygon_1[j][0])
		if (theta_j is lesss than 0)
		{
			theta_j = theta_j + 2 * pi
		}
		if (switch)
		{
			if (theta_j not beween theta_maximum and theta_minimum)
			{
				switch = false
				add vector_side to link_vect
			}
			else
			{
				reverse_switch = false
				add inverse_vector_side to reverse_link_vect
			}
		}
		else
		{
			if (theta_j is between theta_maximum and theta_minimum)
			{
				switch = true
				add inverse_vector_side to link_vect
			}
			else
			{
				reverse_switch = false
				add vector_side to reverse_link_vect
			}
		}
		add vectors_polygon_1[j] to link_vect
		add vectors_polygon_1[j] to reverse_link_vect
		j++
	} while (i is less than the size of vectors_polygon_1)
	if (not switch)
	{
		add vector_side to link_vect
	}
	if (not reverse_switch)
	{
		add inverse_vector_side to reverse_link_vect
	}
	if (polygon_1[0] is inside link_poly)
	{
		return true
	}
	if (polygon_1[0] is inside reverse_link_poly)
	{
		return true
	}
	if (polygon_1[0] is inside the reverse of the polygon 1 starting to polygon_2[i])
	{
		return true
	}
}
return false
